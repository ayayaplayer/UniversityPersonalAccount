// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UniversityPersonalAccount.Data;

#nullable disable

namespace UniversityPersonalAccount.Migrations
{
    [DbContext(typeof(PersonalAccountDbContext))]
    [Migration("20251027084946_CreateCKMasterAndPostgraduate")]
    partial class CreateCKMasterAndPostgraduate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseGroup", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupsId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("CourseGroup");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseName")
                        .HasColumnType("integer");

                    b.Property<int>("DegreeLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses", t =>
                        {
                            t.HasCheckConstraint("CKBachelor", " \"DegreeLevel\" = 1 AND \"CourseName\" > 0 AND  \"CourseName\" < 5  ");

                            t.HasCheckConstraint("CKMaster", " \"DegreeLevel\" = 2 AND \"CourseName\" > 0 AND  \"CourseName\" < 3  ");

                            t.HasCheckConstraint("CKPostgraduate", " \"DegreeLevel\" = 3 AND \"CourseName\" > 0 AND  \"CourseName\" < 4  ");
                        });
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.HalfYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateStart")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("HalfYears", t =>
                        {
                            t.HasCheckConstraint("CKValidateDate", " \"DateEnd\" >  \"DateStart\" < ");
                        });
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Classroom")
                        .HasColumnType("text");

                    b.Property<string>("SubjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassNumber")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("HalfYearId")
                        .HasColumnType("integer");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("HalfYearId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Sessions", t =>
                        {
                            t.HasCheckConstraint("CKClassNumber", " \"ClassNumber\" > 0 AND \"ClassNumber\" < 8");

                            t.HasCheckConstraint("CKValidateSessionTime", " \"EndTime\" >  \"StartTime\" ");
                        });
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Students", t =>
                        {
                            t.HasCheckConstraint("CKValidateEmail", " \"Email\" ~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$' ");
                        });
                });

            modelBuilder.Entity("CourseGroup", b =>
                {
                    b.HasOne("UniversityPersonalAccount.Models.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPersonalAccount.Models.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("UniversityPersonalAccount.Models.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPersonalAccount.Models.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Group", b =>
                {
                    b.HasOne("UniversityPersonalAccount.Models.Entities.Faculty", "Faculty")
                        .WithMany("Groups")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPersonalAccount.Models.Entities.Schedule", null)
                        .WithMany("Groups")
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Session", b =>
                {
                    b.HasOne("UniversityPersonalAccount.Models.Entities.HalfYear", "HalfYear")
                        .WithMany("Sessions")
                        .HasForeignKey("HalfYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPersonalAccount.Models.Entities.Schedule", null)
                        .WithMany("Sessions")
                        .HasForeignKey("ScheduleId");

                    b.Navigation("HalfYear");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Student", b =>
                {
                    b.HasOne("UniversityPersonalAccount.Models.Entities.Group", "group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Faculty", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.HalfYear", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("UniversityPersonalAccount.Models.Entities.Schedule", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
